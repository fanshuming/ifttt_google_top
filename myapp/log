get head =========================
{ accept: 'application/json',
  'accept-charset': 'utf-8',
  'accept-encoding': 'gzip, deflate',
  'user-agent': 'IFTTT-Protocol/v1',
  authorization: 'Bearer 123',
  'x-request-id': '7aed2b9d975e49c9aad786be7218ed18',
  'content-type': 'application/json',
  'x-newrelic-id': 'VwAOU1RRGwIJUFNTAAgG',
  'x-newrelic-transaction': 'PxQGU1UAClIDXVQDB1MPVgAFFB8EBw8RVU4aUwoLVwBSVgBUUFFRWlRSA0NKQQoCVgFYWwYJFTs=',
  connection: 'close',
  host: '47516e85.ngrok.io',
  'content-length': '142',
  'x-forwarded-proto': 'https',
  'x-forwarded-for': '34.228.156.137' }
IncomingMessage {
  _readableState: 
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: true,
     ended: true,
     endEmitted: true,
     reading: false,
     sync: false,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: false,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Array],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 3 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 3 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 20393,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        _startAt: undefined,
        _startTime: undefined,
        writeHead: [Function: writeHead],
        __onFinished: [Object],
        [Symbol(outHeadersKey)]: [Object] },
     _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 37416 },
     [Symbol(asyncId)]: 5,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 7,
     [Symbol(triggerAsyncId)]: 5 },
  connection: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Array],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 3 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 3 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 20393,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        _startAt: undefined,
        _startTime: undefined,
        writeHead: [Function: writeHead],
        __onFinished: [Object],
        [Symbol(outHeadersKey)]: [Object] },
     _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 37416 },
     [Symbol(asyncId)]: 5,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 7,
     [Symbol(triggerAsyncId)]: 5 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  headers: 
   { accept: 'application/json',
     'accept-charset': 'utf-8',
     'accept-encoding': 'gzip, deflate',
     'user-agent': 'IFTTT-Protocol/v1',
     authorization: 'Bearer 123',
     'x-request-id': '7aed2b9d975e49c9aad786be7218ed18',
     'content-type': 'application/json',
     'x-newrelic-id': 'VwAOU1RRGwIJUFNTAAgG',
     'x-newrelic-transaction': 'PxQGU1UAClIDXVQDB1MPVgAFFB8EBw8RVU4aUwoLVwBSVgBUUFFRWlRSA0NKQQoCVgFYWwYJFTs=',
     connection: 'close',
     host: '47516e85.ngrok.io',
     'content-length': '142',
     'x-forwarded-proto': 'https',
     'x-forwarded-for': '34.228.156.137' },
  rawHeaders: 
   [ 'Accept',
     'application/json',
     'Accept-Charset',
     'utf-8',
     'Accept-Encoding',
     'gzip, deflate',
     'User-Agent',
     'IFTTT-Protocol/v1',
     'Authorization',
     'Bearer 123',
     'X-Request-Id',
     '7aed2b9d975e49c9aad786be7218ed18',
     'Content-Type',
     'application/json',
     'X-Newrelic-Id',
     'VwAOU1RRGwIJUFNTAAgG',
     'X-Newrelic-Transaction',
     'PxQGU1UAClIDXVQDB1MPVgAFFB8EBw8RVU4aUwoLVwBSVgBUUFFRWlRSA0NKQQoCVgFYWwYJFTs=',
     'Connection',
     'close',
     'Host',
     '47516e85.ngrok.io',
     'Content-Length',
     '142',
     'X-Forwarded-Proto',
     'https',
     'X-Forwarded-For',
     '34.228.156.137' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/smarthome/ifttt/v1/actions/autobed',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client: 
   Socket {
     connecting: false,
     _hadError: false,
     _handle: 
      TCP {
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState: 
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events: 
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Array],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState: 
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 3 },
     _server: 
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 3 },
     _idleTimeout: 120000,
     _idleNext: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev: 
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 20393,
     _destroyed: false,
     parser: 
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage: 
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        _startAt: undefined,
        _startTime: undefined,
        writeHead: [Function: writeHead],
        __onFinished: [Object],
        [Symbol(outHeadersKey)]: [Object] },
     _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 37416 },
     [Symbol(asyncId)]: 5,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 7,
     [Symbol(triggerAsyncId)]: 5 },
  _consuming: true,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/smarthome/ifttt/v1/actions/autobed',
  _parsedUrl: 
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/smarthome/ifttt/v1/actions/autobed',
     path: '/smarthome/ifttt/v1/actions/autobed',
     href: '/smarthome/ifttt/v1/actions/autobed',
     _raw: '/smarthome/ifttt/v1/actions/autobed' },
  params: {},
  query: {},
  res: 
   ServerResponse {
     domain: null,
     _events: { finish: [Array], end: [Function: onevent] },
     _eventsCount: 2,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 20393,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        _peername: [Object],
        [Symbol(asyncId)]: 5,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 7,
        [Symbol(triggerAsyncId)]: 5 },
     connection: 
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 20393,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        _peername: [Object],
        [Symbol(asyncId)]: 5,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 7,
        [Symbol(triggerAsyncId)]: 5 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     _startAt: undefined,
     _startTime: undefined,
     writeHead: [Function: writeHead],
     __onFinished: { [Function: listener] queue: [Array] },
     [Symbol(outHeadersKey)]: { 'x-powered-by': [Array] } },
  _startAt: [ 18320, 770611962 ],
  _startTime: 2018-08-13T07:14:54.872Z,
  _remoteAddress: '::ffff:127.0.0.1',
  body: 
   { actionFields: {},
     ifttt_source: 
      { id: '83467375',
        url: 'https://ifttt.com/myrecipes/personal/83467375' },
     user: { timezone: 'Asia/Shanghai' } },
  _body: true,
  length: undefined,
  read: [Function],
  secret: undefined,
  cookies: {},
  signedCookies: {},
  route: 
   Route {
     path: '/smarthome/ifttt/v1/actions/autobed',
     stack: [ [Object] ],
     methods: { post: true } } }
method - POST
url - /smarthome/ifttt/v1/actions/autobed
==============
Bearer 123
{ actionFields: {},
  ifttt_source: 
   { id: '83467375',
     url: 'https://ifttt.com/myrecipes/personal/83467375' },
  user: { timezone: 'Asia/Shanghai' } }
[0mPOST /smarthome/ifttt/v1/actions/autobed [32m200 [0m21.657 ms - 66[0m
get head =========================
{ accept: 'application/json',
  'accept-charset': 'utf-8',
  'accept-encoding': 'gzip, deflate',
  'user-agent': 'IFTTT-Protocol/v1',
  'ifttt-test-mode': '1',
  'ifttt-channel-key': 'pAKxcfkkD85MlTjFPSdj3aDCrPA3mwt4_uZIOG6-kGqEB2LdKLpVmmIL15tCj-sJ',
  'ifttt-service-key': 'pAKxcfkkD85MlTjFPSdj3aDCrPA3mwt4_uZIOG6-kGqEB2LdKLpVmmIL15tCj-sJ',
  'x-request-id': '94c62346f7494346b5b17b6988ce34cc',
  'x-newrelic-id': 'VwAOU1RRGwIJUFNTAAgG',
  'x-newrelic-transaction': 'PxRRVlFRWgdUUwUGUwQAV1AAFB8EBw8RVU4aBA8PBlAHAQ4FVQUGVVUCBkNKQQsDBAYAUgUGFTs=',
  connection: 'close',
  host: '47516e85.ngrok.io',
  'x-forwarded-proto': 'https',
  'x-forwarded-for': '107.23.81.125' }
method - GET
url - /smarthome/ifttt/v1/status
pAKxcfkkD85MlTjFPSdj3aDCrPA3mwt4_uZIOG6-kGqEB2LdKLpVmmIL15tCj-sJ
[0mGET /smarthome/ifttt/v1/status [32m200 [0m2.265 ms - 16[0m
get head =========================
{ accept: 'application/json',
  'accept-charset': 'utf-8',
  'accept-encoding': 'gzip, deflate',
  'user-agent': 'IFTTT-Protocol/v1',
  'ifttt-test-mode': '1',
  'ifttt-channel-key': 'INVALID',
  'ifttt-service-key': 'INVALID',
  'x-request-id': 'b1d6971e86d1400f82ff01240d7fa026',
  'x-newrelic-id': 'VwAOU1RRGwIJUFNTAAgG',
  'x-newrelic-transaction': 'PxRRVlFRWgdUUwUGUwQAV1AAFB8EBw8RVU4aBA8PBlAHAQ4FVQUGVVUCBkNKQQsDBAYAUgUGFTs=',
  connection: 'close',
  host: '47516e85.ngrok.io',
  'x-forwarded-proto': 'https',
  'x-forwarded-for': '107.23.81.125' }
method - GET
url - /smarthome/ifttt/v1/status
INVALID
[0mGET /smarthome/ifttt/v1/status [33m401 [0m0.672 ms - 16[0m
get head =========================
{ accept: 'application/json',
  'accept-charset': 'utf-8',
  'accept-encoding': 'gzip, deflate',
  'user-agent': 'IFTTT-Protocol/v1',
  'ifttt-test-mode': '1',
  'ifttt-channel-key': 'pAKxcfkkD85MlTjFPSdj3aDCrPA3mwt4_uZIOG6-kGqEB2LdKLpVmmIL15tCj-sJ',
  'ifttt-service-key': 'pAKxcfkkD85MlTjFPSdj3aDCrPA3mwt4_uZIOG6-kGqEB2LdKLpVmmIL15tCj-sJ',
  'x-request-id': '50875fd35fe84b278898ceec88e0fe56',
  'content-length': '0',
  'x-newrelic-id': 'VwAOU1RRGwIJUFNTAAgG',
  'x-newrelic-transaction': 'PxRRVlFRWgdUUwUGUwQAV1AAFB8EBw8RVU4aBA8PBlAHAQ4FVQUGVVUCBkNKQQsDBAYAUgUGFTs=',
  connection: 'close',
  host: '47516e85.ngrok.io',
  'content-type': 'application/x-www-form-urlencoded',
  'x-forwarded-proto': 'https',
  'x-forwarded-for': '107.23.81.125' }
method - POST
url - /smarthome/ifttt/v1/test/setup
pAKxcfkkD85MlTjFPSdj3aDCrPA3mwt4_uZIOG6-kGqEB2LdKLpVmmIL15tCj-sJ
[0mPOST /smarthome/ifttt/v1/test/setup [32m200 [0m1.090 ms - 203[0m
get head =========================
{ accept: 'application/json',
  'accept-charset': 'utf-8',
  'accept-encoding': 'gzip, deflate',
  'user-agent': 'IFTTT-Protocol/v1',
  'ifttt-test-mode': '1',
  'ifttt-channel-key': 'INVALID',
  'ifttt-service-key': 'INVALID',
  'x-request-id': '7bfe4342e9b14fad9038433d5f7cfaea',
  'content-length': '0',
  'x-newrelic-id': 'VwAOU1RRGwIJUFNTAAgG',
  'x-newrelic-transaction': 'PxRRVlFRWgdUUwUGUwQAV1AAFB8EBw8RVU4aBA8PBlAHAQ4FVQUGVVUCBkNKQQsDBAYAUgUGFTs=',
  connection: 'close',
  host: '47516e85.ngrok.io',
  'content-type': 'application/x-www-form-urlencoded',
  'x-forwarded-proto': 'https',
  'x-forwarded-for': '107.23.81.125' }
method - POST
url - /smarthome/ifttt/v1/test/setup
INVALID
[0mPOST /smarthome/ifttt/v1/test/setup [33m401 [0m0.553 ms - 13[0m
